{"version":3,"sources":["useMouseHover.js","Tile.js","gift.png","SpecialTile.js","App.js","reportWebVitals.js","index.js"],"names":["firstMouse","position","client","x","y","screen","page","boundingRect","left","top","width","height","useMouseHover","selectedEl","touchEnabled","selectedElementId","selectedElementOffset","useState","mouse","setMouse","onMouseTouchEvent","event","clientX","clientY","selectedElPosition","selectedElBoundingRect","getBoundingClientRect","rad2Deg","Math","PI","angle","atan2","prevState","screenX","screenY","pageX","pageY","eventType","type","selectedElement","onLeave","onSelectedElementEnter","isHover","onSelectedElementLeave","useEffect","document","getElementById","Error","addEventListener","window","removeEventListener","Tile","props","idNumber","specialIdNumber","hover","color","setColor","console","log","className","id","SpecialTile","display","setDisplay","onWin","onclick","setDidWin","src","gift","alt","App","didWin","divArray","count","specialID","floor","random","winTitle","i","tilesArray","push","tiles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.111ed7a3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst firstMouse = {\n    position: {\n        client: {\n            x: null,\n            y: null\n        },\n        screen: {\n            x: null,\n            y: null\n        },\n        page: {\n            x: null,\n            y: null\n        },\n        boundingRect: {\n            left: null,\n            top: null,\n            width: null,\n            height: null\n        }\n    }\n}\n\nfunction useMouseHover (\n    touchEnabled = true, \n    selectedElementId,\n    selectedElementOffset = {x: 0, y: 0}\n    ) {\n        const [mouse, setMouse] = useState(firstMouse);\n        let selectedEl;\n\n        const onMouseTouchEvent = (event) => {\n            let clientX;\n            let clientY;\n            let screenX;\n            let screenY;\n            let pageX;\n            let pageY;\n\n            const selectedElPosition = { ...mouse.position };\n            const selectedElBoundingRect = { ...mouse.boundingRect };\n            if (selectedEl) {\n                const { left, top, width, height } = selectedEl.getBoundingClientRect();\n                selectedElPosition.x = clientX - left - selectedElementOffset.x;\n                selectedElPosition.y = clientY - top - selectedElementOffset.y;\n                const rad2Deg = 180 / Math.PI;\n                const angleOffset = 180;\n                selectedElPosition.angle =\n                  Math.atan2(selectedElPosition.y, -selectedElPosition.x) * rad2Deg + angleOffset;\n                selectedElBoundingRect.left = left;\n                selectedElBoundingRect.top = top;\n                selectedElBoundingRect.width = width;\n                selectedElBoundingRect.height = height;\n            }\n            \n            setMouse(prevState => ({\n                ...prevState,\n                position: {\n                  client: { x: clientX, y: clientY },\n                  screen: { x: screenX, y: screenY },\n                  page: { x: pageX, y: pageY },\n                },\n                eventType: event.type,\n                selectedElement: {\n                  ...prevState.selectedElement,\n                  position: selectedElPosition,\n                  boundingRect: selectedElBoundingRect,\n                },\n            }));\n        }\n\n        const onLeave = ()  => {\n            setMouse(firstMouse);\n        };\n\n          const onSelectedElementEnter = () => {\n            const selectedElement = { ...mouse.selectedElement };\n            selectedElement.isHover = true;\n            setMouse(prevState => ({\n              ...prevState,\n              selectedElement,\n            }));\n        };\n\n        const onSelectedElementLeave = () => {\n            const selectedElement = { ...mouse.selectedElement };\n            selectedElement.isHover = false;\n            setMouse(prevState => ({\n              ...prevState,\n              selectedElement,\n            }));\n        };\n\n\n        useEffect(() => {\n            if (selectedElementId) {\n                selectedEl = document.getElementById(selectedElementId);\n                if (!selectedEl) {\n                    throw new Error(`Element with id=\"${selectedElementId}\" doesn't exist\"`);\n                }\n                selectedEl.addEventListener('mouseenter', onSelectedElementEnter);\n                selectedEl.addEventListener('mouseleave', onSelectedElementLeave);\n            }\n            document.addEventListener('mousemove', onMouseTouchEvent);\n            document.addEventListener('mousedown', onMouseTouchEvent);\n            document.addEventListener('mouseup', onMouseTouchEvent);\n\n            if (touchEnabled) {\n                window.addEventListener('touchend', onLeave);\n            }\n\n            return () => {\n                document.removeEventListener('mousemove', onMouseTouchEvent);\n                document.removeEventListener('mousedown', onMouseTouchEvent);\n                document.removeEventListener('mouseup', onMouseTouchEvent);\n                if(touchEnabled) {\n                    window.removeEventListener('touchend', onLeave);\n                }\n            }\n        }, []);\n        return mouse;\n    }\n\n    export default useMouseHover;\n\n","import { React, useEffect, useState } from 'react';\nimport useMouseHover from './useMouseHover';\nimport './Tile.css';\n\n\nfunction Tile(props) {\n    const idNumber = props.idNumber;\n\n    //DEBUG: \n    const specialIdNumber = props.specialIdNumber;\n\n    const hover = useMouseHover(true, idNumber);\n    const [color, setColor] = useState('green');\n\n    if (!hover.selectedElement) {\n      hover.selectedElement = {\n        isHover: false\n      }\n    }\n\n    //DEBUG: \n    if (idNumber === specialIdNumber) {\n        console.log('oops! making a normal tile for the special id');\n    }\n\n    useEffect(() => {\n        if (hover.selectedElement) {\n            if (hover.selectedElement.isHover) {\n                console.log(idNumber);\n                setColor('transparent');\n            } else {\n                setColor('green');\n            }\n        }\n    }, [hover, idNumber])\n\n    return (\n        <div className={color} id={idNumber}>\n        </div>\n    );\n}\n\nexport default Tile;","export default __webpack_public_path__ + \"static/media/gift.c4ac879c.png\";","import { React, useEffect, useState } from 'react';\nimport useMouseHover from './useMouseHover';\nimport './Tile.css';\nimport gift from './gift.png';\n\nfunction SpecialTile(props) {\n    const idNumber = props.idNumber;\n    const hover = useMouseHover(true, idNumber);\n    const [display, setDisplay] = useState('green');\n\n    if (!hover.selectedElement) {\n      hover.selectedElement = {\n        isHover: false\n      }\n    }\n\n    const onWin = () => {\n        props.setDidWin(true);\n    }\n\n    useEffect(() => {\n        if (hover.selectedElement) {\n            if (hover.selectedElement.isHover) {\n                // display image!!!!\n                // and you WIN!!!\n                console.log('this is the winning tile');\n                setDisplay('image');\n                props.onWin(true);\n            } else {\n                setDisplay('green');\n                props.onWin(false);\n            }\n        }\n    }, [hover])\n\n    return (\n        <div className={display} id={idNumber} onclick={onWin}>\n            {hover.selectedElement.isHover &&\n            <img className=\"giftImage\" src={gift} alt=\"gift\"/>\n            }\n        </div>\n    );\n}\n\nexport default SpecialTile;","import './App.css';\nimport Tile from './Tile';\nimport SpecialTile from './SpecialTile';\nimport { React, useState } from 'react';\nimport gift from './gift.png';\n\n/*TODO:\n- make it faster!\n- make WINNER go across or something when the gift is uncovered\n*/\n\n\nfunction App() {\n\n  const [didWin, setDidWin] = useState(false);\n\n  let divArray = [];\n  let count = 0;\n\n  let specialID = Math.floor(Math.random() * 144);\n\n  let winTitle = null;\n\n  for (let i = 0; i < 12; i++) {\n    let tilesArray = [];\n    for (let i = 0; i < 12; i++) {\n      if (count === specialID) {\n        console.log('making a special tile');\n        tilesArray.push(<SpecialTile idNumber={count} onWin={setDidWin}/>);\n        console.log(specialID);\n      } else {\n        tilesArray.push(<Tile idNumber={count} key={count} specialIdNumber={specialID}/>);\n      }\n      count++;\n    }\n    divArray.push(<div className=\"row\" key={i}>\n      {tilesArray}\n    </div>);\n  }\n\n  let tiles = (\n    <div className=\"tiles\">\n        {divArray}\n      </div>);\n\n  if(didWin) {\n    winTitle = (\n      <div>\n        <h1>YOU FOUND THE GIFT!</h1>\n      </div>);\n    tiles = (\n      <div>\n        <img className='bigGift' src={gift} alt='gift'/>\n      </div>\n    )\n  } else {\n    winTitle = (\n    <div>\n      <h1>Find the hidden present!</h1>\n    </div>);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Win\" >\n        {winTitle}\n      </div>\n        {tiles}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}